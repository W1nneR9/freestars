import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
import asyncio

TOKEN = "7719344191:AAEeSvcUdKKusoFHFBDptU4D5TKW_YW7Sb4"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
CHECK_CHANNEL = "@freepodarkitg"  # –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
SPONSOR_CHANNELS = [
    ("–°–ø–æ–Ω—Å–æ—Ä 1", "https://t.me/+mgWOYM5xPbA0MGQy"),
    ("–°–ø–æ–Ω—Å–æ—Ä 2", "https://t.me/+SnF1AIfzLqQyMTRi"),
    ("–°–ø–æ–Ω—Å–æ—Ä 3", "https://t.me/+lI7GtGXIGlgyYmIy"),
    ("–°–ø–æ–Ω—Å–æ—Ä 4", "https://t.me/freepodarkitg"),
]

PHOTO_PATH = "starsfree.png"  # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ (–∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª)
PHOTO_URL = "https://example.com/photo.jpg"  # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å URL

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
LOGS_DIR = "logs"
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫
user_attempts = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ª–æ–≥-—Ñ–∞–π–ª
def log_user_info(user: types.User):
    log_file = os.path.join(LOGS_DIR, f"{user.id}.txt")
    with open(log_file, "w", encoding="utf-8") as file:
        file.write(f"–ò–º—è: {user.full_name}\n")
        file.write(f"Telegram ID: {user.id}\n")
        file.write(f"Username: @{user.username if user.username else '–ù–µ—Ç'}\n")
        file.write(f"–î–∞—Ç–∞ –≤—Ö–æ–¥–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHECK_CHANNEL, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def send_subscription_message(user_id, message_text):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name, url=url)] for name, url in SPONSOR_CHANNELS
        ] + [[InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]]
    )

    await bot.send_message(user_id, message_text, reply_markup=keyboard)


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    user_attempts[user_id] = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log_user_info(message.from_user)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name, url=url)] for name, url in SPONSOR_CHANNELS
        ] + [[InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]]
    )

    if os.path.exists(PHOTO_PATH):  # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ
        photo = FSInputFile(PHOTO_PATH)
        await bot.send_photo(
            user_id,
            photo,
            caption="üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
                    "–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ ‚≠ê –∑–≤–µ–∑–¥.\n\n"
                    "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏ –Ω–∞–∂–º–∏ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.",
            reply_markup=keyboard
        )
    else:  # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º URL
        await bot.send_photo(
            user_id,
            PHOTO_URL,
            caption="üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
                    "–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ ‚≠ê –∑–≤–µ–∑–¥.\n\n"
                    "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏ –Ω–∞–∂–º–∏ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.",
            reply_markup=keyboard
        )


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å —É—á–µ—Ç–æ–º –ø–æ–ø—ã—Ç–æ–∫)
@dp.callback_query(lambda c: c.data == "check_subscription")
async def check_sub(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_attempts[user_id] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫

    if user_attempts[user_id] < 3:
        # –ü–µ—Ä–≤—ã–π –∏ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º
        await send_subscription_message(user_id, "‚ö†Ô∏è –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, –∏–Ω–∞—á–µ –Ω–µ —Å–º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!")
    else:
        # –¢—Ä–µ—Ç–∏–π —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscribed = await check_subscription(user_id)
        if subscribed:
            await callback.message.edit_text(
                "üéâ –¢—ã –≤—Å–µ –≤—ã–ø–æ–ª–Ω–∏–ª! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏.\n\n"
                "‚è≥ –°–µ–π—á–∞—Å –±–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –ø–µ—Ä–µ—Ä—ã–≤–µ. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ!"
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            await send_subscription_message(user_id, "‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è! –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
